{"ast":null,"code":"// thanh tự động trượt\nconst initLevelSlider = () => {\n  const slider = document.getElementById('levelsSlider');\n  if (!slider) return; // Đảm bảo slider tồn tại trên trang\n\n  const track = slider.querySelector('.levels-track');\n  const cards = track.querySelectorAll('.level-card-container');\n  const prevBtn = document.querySelector('.slider-prev');\n  const nextBtn = document.querySelector('.slider-next');\n\n  // Tính toán số lượng card hiển thị trên màn hình\n  let cardWidth = cards[0].offsetWidth;\n  let gap = parseInt(window.getComputedStyle(track).columnGap || '24');\n  let containerWidth = slider.offsetWidth;\n  let cardPerView = Math.floor(containerWidth / (cardWidth + gap));\n  let scrollAmount = 0;\n  let maxScroll = track.scrollWidth - containerWidth;\n\n  // Biến cho tự động cuộn\n  let autoScrollInterval;\n  const autoScrollDelay = 3000; // 3 giây mỗi lần cuộn\n\n  // Bắt đầu tự động cuộn\n  const startAutoScroll = () => {\n    stopAutoScroll(); // Dừng trước khi bắt đầu mới để tránh nhiều interval\n\n    autoScrollInterval = setInterval(() => {\n      // Nếu đã cuộn đến cuối, quay lại đầu\n      if (scrollAmount >= maxScroll - 10) {\n        // Thêm buffer nhỏ\n        scrollAmount = 0;\n      } else {\n        // Cuộn đến card tiếp theo\n        scrollAmount += cardWidth + gap;\n        // Đảm bảo không cuộn vượt quá kích thước tối đa\n        if (scrollAmount > maxScroll) scrollAmount = maxScroll;\n      }\n\n      // Áp dụng cuộn\n      track.style.transform = `translateX(-${scrollAmount}px)`;\n    }, autoScrollDelay);\n  };\n\n  // Dừng tự động cuộn\n  const stopAutoScroll = () => {\n    if (autoScrollInterval) {\n      clearInterval(autoScrollInterval);\n      autoScrollInterval = null;\n    }\n  };\n\n  // Cập nhật các biến khi thay đổi kích thước màn hình\n  const handleResize = () => {\n    cardWidth = cards[0].offsetWidth;\n    gap = parseInt(window.getComputedStyle(track).columnGap || '24');\n    containerWidth = slider.offsetWidth;\n    cardPerView = Math.floor(containerWidth / (cardWidth + gap));\n    maxScroll = track.scrollWidth - containerWidth;\n\n    // Reset vị trí nếu đã cuộn quá xa\n    if (scrollAmount > maxScroll) {\n      scrollAmount = maxScroll;\n      track.style.transform = `translateX(-${scrollAmount}px)`;\n    }\n  };\n  window.addEventListener('resize', handleResize);\n\n  // Xử lý nút Previous\n  const handlePrevClick = () => {\n    stopAutoScroll(); // Dừng tự động cuộn khi người dùng tương tác\n\n    // Nếu đã ở đầu, nhảy đến cuối\n    if (scrollAmount <= 0) {\n      scrollAmount = maxScroll;\n    } else {\n      scrollAmount -= cardWidth + gap;\n      if (scrollAmount < 0) scrollAmount = 0;\n    }\n    track.style.transform = `translateX(-${scrollAmount}px)`;\n\n    // Khởi động lại tự động cuộn sau khi người dùng tương tác\n    startAutoScroll();\n  };\n\n  // Xử lý nút Next\n  const handleNextClick = () => {\n    stopAutoScroll(); // Dừng tự động cuộn khi người dùng tương tác\n\n    // Nếu đã ở cuối, nhảy về đầu\n    if (scrollAmount >= maxScroll) {\n      scrollAmount = 0;\n    } else {\n      scrollAmount += cardWidth + gap;\n      if (scrollAmount > maxScroll) scrollAmount = maxScroll;\n    }\n    track.style.transform = `translateX(-${scrollAmount}px)`;\n\n    // Khởi động lại tự động cuộn sau khi người dùng tương tác\n    startAutoScroll();\n  };\n  prevBtn.addEventListener('click', handlePrevClick);\n  nextBtn.addEventListener('click', handleNextClick);\n\n  // Chức năng vuốt trên thiết bị cảm ứng\n  let isDragging = false;\n  let startPos = 0;\n  let currentTranslate = 0;\n  const dragStart = e => {\n    stopAutoScroll(); // Dừng tự động cuộn khi người dùng tương tác\n\n    if (e.type === 'touchstart') {\n      startPos = e.touches[0].clientX;\n    }\n    isDragging = true;\n    currentTranslate = scrollAmount;\n  };\n  const drag = e => {\n    if (isDragging) {\n      const currentPosition = e.touches[0].clientX;\n      const diff = startPos - currentPosition;\n      const newTranslate = currentTranslate + diff;\n\n      // Giới hạn kéo\n      if (newTranslate >= 0 && newTranslate <= maxScroll) {\n        track.style.transform = `translateX(-${newTranslate}px)`;\n      }\n    }\n  };\n  const dragEnd = () => {\n    isDragging = false;\n    // Cập nhật vị trí sau khi kéo\n    const transform = getComputedStyle(track).getPropertyValue('transform');\n    const matrix = new DOMMatrix(transform);\n    scrollAmount = -matrix.m41;\n\n    // Khởi động lại tự động cuộn sau khi người dùng tương tác\n    startAutoScroll();\n  };\n  track.addEventListener('touchstart', dragStart);\n  track.addEventListener('touchend', dragEnd);\n  track.addEventListener('touchmove', drag);\n\n  // Dừng tự động cuộn khi hover vào slider\n  slider.addEventListener('mouseenter', stopAutoScroll);\n  slider.addEventListener('mouseleave', startAutoScroll);\n\n  // Bắt đầu tự động cuộn khi component được mount\n  startAutoScroll();\n\n  // Return cleanup function\n  return () => {\n    window.removeEventListener('resize', handleResize);\n    prevBtn.removeEventListener('click', handlePrevClick);\n    nextBtn.removeEventListener('click', handleNextClick);\n    track.removeEventListener('touchstart', dragStart);\n    track.removeEventListener('touchend', dragEnd);\n    track.removeEventListener('touchmove', drag);\n    slider.removeEventListener('mouseenter', stopAutoScroll);\n    slider.removeEventListener('mouseleave', startAutoScroll);\n    stopAutoScroll(); // Đảm bảo dừng interval khi component unmount\n  };\n};\nexport default initLevelSlider;","map":{"version":3,"names":["initLevelSlider","slider","document","getElementById","track","querySelector","cards","querySelectorAll","prevBtn","nextBtn","cardWidth","offsetWidth","gap","parseInt","window","getComputedStyle","columnGap","containerWidth","cardPerView","Math","floor","scrollAmount","maxScroll","scrollWidth","autoScrollInterval","autoScrollDelay","startAutoScroll","stopAutoScroll","setInterval","style","transform","clearInterval","handleResize","addEventListener","handlePrevClick","handleNextClick","isDragging","startPos","currentTranslate","dragStart","e","type","touches","clientX","drag","currentPosition","diff","newTranslate","dragEnd","getPropertyValue","matrix","DOMMatrix","m41","removeEventListener"],"sources":["/Users/trunghieu/nihongo-master/nihongo-master/frontend/src/utils/levelSlider.js"],"sourcesContent":["// thanh tự động trượt\nconst initLevelSlider = () => {\n    const slider = document.getElementById('levelsSlider');\n    if (!slider) return; // Đảm bảo slider tồn tại trên trang\n    \n    const track = slider.querySelector('.levels-track');\n    const cards = track.querySelectorAll('.level-card-container');\n    const prevBtn = document.querySelector('.slider-prev');\n    const nextBtn = document.querySelector('.slider-next');\n    \n    // Tính toán số lượng card hiển thị trên màn hình\n    let cardWidth = cards[0].offsetWidth;\n    let gap = parseInt(window.getComputedStyle(track).columnGap || '24');\n    let containerWidth = slider.offsetWidth;\n    let cardPerView = Math.floor(containerWidth / (cardWidth + gap));\n    let scrollAmount = 0;\n    let maxScroll = track.scrollWidth - containerWidth;\n    \n    // Biến cho tự động cuộn\n    let autoScrollInterval;\n    const autoScrollDelay = 3000; // 3 giây mỗi lần cuộn\n    \n    // Bắt đầu tự động cuộn\n    const startAutoScroll = () => {\n      stopAutoScroll(); // Dừng trước khi bắt đầu mới để tránh nhiều interval\n      \n      autoScrollInterval = setInterval(() => {\n        // Nếu đã cuộn đến cuối, quay lại đầu\n        if (scrollAmount >= maxScroll - 10) { // Thêm buffer nhỏ\n          scrollAmount = 0;\n        } else {\n          // Cuộn đến card tiếp theo\n          scrollAmount += cardWidth + gap;\n          // Đảm bảo không cuộn vượt quá kích thước tối đa\n          if (scrollAmount > maxScroll) scrollAmount = maxScroll;\n        }\n        \n        // Áp dụng cuộn\n        track.style.transform = `translateX(-${scrollAmount}px)`;\n      }, autoScrollDelay);\n    };\n    \n    // Dừng tự động cuộn\n    const stopAutoScroll = () => {\n      if (autoScrollInterval) {\n        clearInterval(autoScrollInterval);\n        autoScrollInterval = null;\n      }\n    };\n    \n    // Cập nhật các biến khi thay đổi kích thước màn hình\n    const handleResize = () => {\n      cardWidth = cards[0].offsetWidth;\n      gap = parseInt(window.getComputedStyle(track).columnGap || '24');\n      containerWidth = slider.offsetWidth;\n      cardPerView = Math.floor(containerWidth / (cardWidth + gap));\n      maxScroll = track.scrollWidth - containerWidth;\n      \n      // Reset vị trí nếu đã cuộn quá xa\n      if (scrollAmount > maxScroll) {\n        scrollAmount = maxScroll;\n        track.style.transform = `translateX(-${scrollAmount}px)`;\n      }\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Xử lý nút Previous\n    const handlePrevClick = () => {\n      stopAutoScroll(); // Dừng tự động cuộn khi người dùng tương tác\n      \n      // Nếu đã ở đầu, nhảy đến cuối\n      if (scrollAmount <= 0) {\n        scrollAmount = maxScroll;\n      } else {\n        scrollAmount -= (cardWidth + gap);\n        if (scrollAmount < 0) scrollAmount = 0;\n      }\n      \n      track.style.transform = `translateX(-${scrollAmount}px)`;\n      \n      // Khởi động lại tự động cuộn sau khi người dùng tương tác\n      startAutoScroll();\n    };\n    \n    // Xử lý nút Next\n    const handleNextClick = () => {\n      stopAutoScroll(); // Dừng tự động cuộn khi người dùng tương tác\n      \n      // Nếu đã ở cuối, nhảy về đầu\n      if (scrollAmount >= maxScroll) {\n        scrollAmount = 0;\n      } else {\n        scrollAmount += (cardWidth + gap);\n        if (scrollAmount > maxScroll) scrollAmount = maxScroll;\n      }\n      \n      track.style.transform = `translateX(-${scrollAmount}px)`;\n      \n      // Khởi động lại tự động cuộn sau khi người dùng tương tác\n      startAutoScroll();\n    };\n    \n    prevBtn.addEventListener('click', handlePrevClick);\n    nextBtn.addEventListener('click', handleNextClick);\n    \n    // Chức năng vuốt trên thiết bị cảm ứng\n    let isDragging = false;\n    let startPos = 0;\n    let currentTranslate = 0;\n    \n    const dragStart = (e) => {\n      stopAutoScroll(); // Dừng tự động cuộn khi người dùng tương tác\n      \n      if (e.type === 'touchstart') {\n        startPos = e.touches[0].clientX;\n      }\n      isDragging = true;\n      currentTranslate = scrollAmount;\n    };\n    \n    const drag = (e) => {\n      if (isDragging) {\n        const currentPosition = e.touches[0].clientX;\n        const diff = startPos - currentPosition;\n        const newTranslate = currentTranslate + diff;\n        \n        // Giới hạn kéo\n        if (newTranslate >= 0 && newTranslate <= maxScroll) {\n          track.style.transform = `translateX(-${newTranslate}px)`;\n        }\n      }\n    };\n    \n    const dragEnd = () => {\n      isDragging = false;\n      // Cập nhật vị trí sau khi kéo\n      const transform = getComputedStyle(track).getPropertyValue('transform');\n      const matrix = new DOMMatrix(transform);\n      scrollAmount = -matrix.m41;\n      \n      // Khởi động lại tự động cuộn sau khi người dùng tương tác\n      startAutoScroll();\n    };\n    \n    track.addEventListener('touchstart', dragStart);\n    track.addEventListener('touchend', dragEnd);\n    track.addEventListener('touchmove', drag);\n    \n    // Dừng tự động cuộn khi hover vào slider\n    slider.addEventListener('mouseenter', stopAutoScroll);\n    slider.addEventListener('mouseleave', startAutoScroll);\n    \n    // Bắt đầu tự động cuộn khi component được mount\n    startAutoScroll();\n    \n    // Return cleanup function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      prevBtn.removeEventListener('click', handlePrevClick);\n      nextBtn.removeEventListener('click', handleNextClick);\n      track.removeEventListener('touchstart', dragStart);\n      track.removeEventListener('touchend', dragEnd);\n      track.removeEventListener('touchmove', drag);\n      slider.removeEventListener('mouseenter', stopAutoScroll);\n      slider.removeEventListener('mouseleave', startAutoScroll);\n      stopAutoScroll(); // Đảm bảo dừng interval khi component unmount\n    };\n  };\n  \n  export default initLevelSlider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}